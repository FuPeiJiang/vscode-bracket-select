set selection -2 HERE +2 first ; + multicursor

detect the closest " or ' or ` and do my thing on the same line : read from package.json options
sameLineSameBracket

if found one " but didn't find another matching "
now look for '

case0: sameline bracket, sameLine bracket
case1: sameline bracket, multiLine bracket
case0 || case1 : use the same algo to look for 2nd bracket
ill use the sameLine algo first..

leftBracketObj, rightBracketObj


case3 : haven't found in both sides thing

//since both sides same amount of chars, don't need to check if out of chars TWICE, saves some ifs.
I'm NOT going to do that for multiline..
  let leftChars = 0
  for (let l = i - 1; l > -1; l--) {
    d(lines[l])
    leftChars += lines[l].length
  }
  let rightChars = 0
  for (let l = i + 1; l > -1; l--) {
    d(lines[l])
    rightChars += lines[l].length
    if (rightChars > leftChars) {
      //SEE THIS IF ?!?!?
    }
  }

soo, if one runs out of lines, it's out, easy, BREAK

need to define quotes for strings, skip strings to not match bracket inside strings

sameLine are strings, no need to skip strings
even when looking for 1st multiLine, I need to skip strings
for sameLine strings, to look for 2nd, I can use indexOf() instead of looping every char
, if not exist.. get back

after checking for sameLine, else if check for string,
if not found 2nd, it's still a string.............
we don't want parsing error

looking for 2nd multiLine, I also need to skip strings

{"okkkkk}HERE"
sigh, just don't look for string when singleLine
but what about
[[]HEREaaaaaaaaa]

sigh, check singleLine first, then multiLine.
multiLine skip string

default behavior for not found, is continue loop

without uglify.js
3.64 KiB
with uglify.js
3.6 KiB

worth, jk

I did a bracket select inside commented code, I'm cursed now
I don't want commented code to affect other code, 
but if I'm already inside a commented code, I want to .txt parse it
this is best for the look around strategy, right ?


I have an array of ranges (they overlap)
 {{}} would be [[0,4],[1,3]], 
how do I know which range an index belongs to ?
index 2 is inside both curly braces, but it belongs in the deepest one : [1,3]
is there a faster way than iterating over each range ?

the fastest way would be : make an array : mapping index to where it belongs
[nowhere,[0,4],[1,3],[0,4],nowhere] 
I'll read about binary search tree

yarn ext
Done in 114.65s
WHAT

add 'for test'
fix if

parser, if inside string, use mine

vscode-bracket-select\node_modules\typescript\lib\typescript.d.ts
    export interface Expression extends Node {
        _expressionBrand: any;
        kind: SyntaxKind.StringLiteral | SyntaxKind.CallExpression
    }

    // export type Expression = StringLiteral|CallExpression & {
    export type Expression = LiteralToken|CallExpression & {
        _expressionBrand: any;
    }

LeftHandSideExpression needs to be extended from Expression, but how ?

`export interface (\w*?) extends UnaryExpression \{`
`export type $1 = UnaryExpression & {`

UpdateExpression
  .PrefixUnaryExpression
    ..JsonMinusNumericLiteral
  .PostfixUnaryExpression
  .LeftHandSideExpression
    ..PartiallyEmittedExpression
    ..MemberExpression
    ..NonNullExpression
DeleteExpression
TypeOfExpression
VoidExpression
AwaitExpression
TypeAssertion

const indexOfRightParen = toParse.indexOf\('\)',node.expression.end\)\n                everything.push\(\[SyntaxKind\.(\w*?),node.expression.pos - 1,indexOfRightParen \+ 1\]\)(?=\n                break)
push_Expr(SyntaxKind.$1)